version: "3"

services:
  app-service-wh1:
    build: "./app"
    volumes: 
      - ./app:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      CHOKIDAR_USEPOLLING: "true"
    ports: 
      - "3006:3000"
    networks:
      wh1-network:
        aliases:
          - appservice
    env_file:
      - ./env/wh1.env
    #links:
    #  - "db-service-wh1:db-service"
    #  - "api-service-wh1:api-service"

  api-service-wh1:
    build: './api'
    volumes: 
      - ./api:/usr/src/app
      - /usr/src/api/node_modules
    ports: 
      - "8006:90"
    networks:
      wh1-network:
        aliases:
          - apiservice
    depends_on:
      - db-service-wh1
    env_file:
      - ./env/wh1.env
    #links:
     # - "db-service-wh1:db-service"
    #  - "app-service-wh1:app-service"

  db-service-wh1:
    image: mongo:3.6.19-xenial
    ports: 
      - "2726:27017"
    networks:
      wh1-network:
        aliases:
          - dbservice
    volumes:
      - db-data-wh1:/data/db
    env_file:
      - ./env/wh1.env

  revproxy-wh1:
    build: ./revproxy
    image: "reverseproxy:1.0.0"
    networks:
      - wh1-network
    ports:
      - "90:90"

networks:
  wh1-network:
  #  driver: bridge
volumes:
  db-data-wh1:
    driver: local

# You need to bind to different ports then centralize them using a loadbalancer that reverse proxies like HAproxy or nginx even
# [nginx-container] ---> [svc1:8001,svc2:8002,svc3:8003]